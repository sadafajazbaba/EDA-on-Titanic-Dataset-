# -*- coding: utf-8 -*-
"""Titanic_Predictive_Modeling

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14iFRKy4mJJr5BUAYmdHaHV5hc4onk4jv
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.neural_network import MLPClassifier
from sklearn import metrics
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
np.random.seed(1)

# Load data
df = pd.read_csv('modified_file.csv')
print(df.shape)
print(df.head())

# Drop non-numeric columns that won't be used as features
df = df.drop(['Name', 'Ticket', 'Embarked'], axis=1)

# Create dummy variables
df = pd.get_dummies(df, columns=['Pclass', 'Sex'], drop_first=True)

# Define target and features
y = df['Survived']
x = df.drop(['Survived'], axis=1)

# Split data into training and test sets
xtrain, xtest, ytrain, ytest = train_test_split(x, y, random_state=10, test_size=0.2)

# Define the model and pipeline
pipeline = Pipeline([
    ('scaler', StandardScaler()),
    ('mlp', MLPClassifier(max_iter=900, random_state=10))
])

# Hyperparameter tuning with GridSearchCV
parameters = {
    'mlp__hidden_layer_sizes': [(10,), (20,), (30,)],
    'mlp__activation': ['relu', 'tanh', 'logistic'],
    'mlp__learning_rate': ['constant', 'adaptive', 'invscaling'],
    'mlp__alpha': [0.0001, 0.001, 0.01, 0.1],  # Regularization parameter
    'mlp__solver': ['adam']  # Using the adam optimizer
}
cv = GridSearchCV(pipeline, parameters, cv=5, scoring='accuracy')
cv.fit(xtrain, ytrain)

def best(result):
    print('Best parameters: {}\n'.format(result.best_params_))
    mean = result.cv_results_['mean_test_score']
    sd = result.cv_results_['std_test_score']
    for m, s, p in zip(mean, sd, result.cv_results_['params']):
        print('{} (+/-{}) for {}'.format(m, s*2, p))

best(cv)
print(cv.best_estimator_)

# Fit the final model and evaluate on the test set
best_pipeline = cv.best_estimator_
best_pipeline.fit(xtrain, ytrain)
pred = best_pipeline.predict(xtest)
print(f'Test set accuracy: {metrics.accuracy_score(ytest, pred)}')
print(metrics.confusion_matrix(ytest, pred))
print(metrics.classification_report(ytest, pred))