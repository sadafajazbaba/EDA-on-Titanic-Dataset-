# -*- coding: utf-8 -*-
"""EDA Titanic

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MpuYcjGyWGwelyYRXoLXKB-PRY3jACzQ
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files
uploaded = files.upload()
import pandas as pd
df = pd.read_csv('Titanic.csv')
df

missing_count = df['Age'].isnull().sum()
print(missing_count)

grouped_data = df.groupby("Sex")
grouped_class = grouped_data.apply(lambda x: x.groupby('Pclass'))
mean_age_males = grouped_class['male']['Age'].mean()
x1 = mean_age_males[1]
x2 = mean_age_males[2]
x3 = mean_age_males[3]
df.loc[(df['Age'].isnull()) & (df['Sex'] == 'male') & (df['Pclass'] == 1), 'Age'] = x1
df.loc[(df['Age'].isnull()) & (df['Sex'] == 'male') & (df['Pclass'] == 2), 'Age'] = x2
df.loc[(df['Age'].isnull()) & (df['Sex'] == 'male') & (df['Pclass'] == 3), 'Age'] = x3
missing_count = df['Age'].isnull().sum()
print(missing_count)

mean_age_miss = df[df['Name'].str.contains('Miss', case=False) & (df['Sex'] == 'female')]['Age'].mean()
mean_age_mrs = df[df['Name'].str.contains('Mrs', case=False) & (df['Sex'] == 'female')]['Age'].mean()
df.loc[(df['Age'].isnull()) & (df['Sex'] == 'female') & (df['Name'].str.contains('Miss', case=False)), 'Age'] = mean_age_miss
df.loc[(df['Age'].isnull()) & (df['Sex'] == 'female') & (df['Name'].str.contains('Mrs', case=False)), 'Age'] = mean_age_mrs
missing_count = df['Age'].isnull().sum()
print(missing_count)

column_to_remove = 'Cabin'
df.drop(columns=[column_to_remove], inplace=True)
df.to_csv('modified_file.csv', index=False)
#confusion

df['Age'].max() #to check the errors in the age

df['Age'].min()



sex_counts = df['Sex'].value_counts()
print(sex_counts)
plt.bar(sex_counts.index, sex_counts.values, color=['blue', 'pink'])
plt.xlabel('Sex')
plt.ylabel('Count')
plt.title('Number of Males and Females in Titanic Dataset')
plt.show()

labels = ['Males', 'Females']
sizes =[577,314]
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title('Males vs Females')
plt.show()

total_survived=df[df['Survived']==1].shape[0]
total_died=df[df['Survived']==0].shape[0]
print("Total number of people survived= ",total_survived)
print("Total number of people died= ", total_died)

categories = ['Died', 'Survived']
counts = [total_died,total_survived]
plt.bar(categories, counts)
plt.xlabel('Outcome')
plt.ylabel('count')
plt.title('Survival Distribution')
plt.show()

labels = ['Survived', 'Died']
sizes = [total_survived,total_died]
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title('Survived vs Died')
plt.show()

total_females = df[(df['Sex'] == 'female')].shape[0]
females_survived = df[(df['Sex'] == 'female') & (df['Survived'] == 1)].shape[0]
print("Number of females who survived:", females_survived)

total_males=df[(df['Sex'] == 'male')].shape[0]
males_survived = df[(df['Sex'] == 'male') & (df['Survived'] == 1)].shape[0]
print("Number of males who survived:", males_survived)

labels = ['Survived Females', 'Survived Males']
sizes = [females_survived,males_survived]
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title('Females survived vs Males survived')
plt.show()

labels = ['Survived Females', 'Died Females']
sizes = [females_survived,314-233]
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title('Females survived vs Females Died')
plt.show()

labels = ['Survived Males', 'Died Males']
sizes = [males_survived,577-109]
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title('Males survived vs Males Died')
plt.show()

labels = ['Survived Males', 'Died Males','Survived Females','Died Females']
sizes = [males_survived,577-109,females_survived,314-233]
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.show()

pd.crosstab([df.Sex,df.Survived],df.Pclass,margins=True).style.background_gradient(cmap='summer_r')

numeric_df = df.select_dtypes(include=['float64', 'int64'])
correlation_matrix = numeric_df.corr()
print(correlation_matrix)

df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})
correlation_matrix = df['Sex'].corr(df['Survived'])
correlation_matrix

sns.heatmap(correlation_matrix, annot=True)
plt.title('Correlation Matrix')
plt.show()

p = df.groupby('Pclass')['Survived'].mean()
print(p)

p.plot(kind='bar')
plt.title('Mean Values of Survived poeple by Passenger Class')
plt.xlabel('Passenger Class')
plt.ylabel('Mean Value')
plt.grid(True)
plt.legend(title='Columns')
plt.show()

Area_ = df['Embarked'].value_counts()
Area_

labels = ['S', 'C','Q']
sizes = [644,168,77]
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title('Port boarded from')
plt.show()

S_survived = df[(df['Embarked'] == 'S') & (df['Survived'] == 1)].shape[0]
S_survived

C_survived = df[(df['Embarked'] == 'C') & (df['Survived'] == 1)].shape[0]
C_survived

Q_survived = df[(df['Embarked'] == 'Q') & (df['Survived'] == 1)].shape[0]
Q_survived

labels = ['S', 'C','Q']
sizes = [217,93,30]
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title('Survival distribution w.r.t ports')
plt.show()

labels = ['C Survived', 'C Died']
sizes = [93,168-93]
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title('Survival Distribution For Southampton Port')
plt.show()

labels = ['Q Survived', 'Q Died']
sizes = [30,77-30]
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title('Survival Distribution For Q Port')
plt.show()

categories = ['S','C', 'Q']
counts = [217,93,30]
plt.bar(categories, counts)
plt.xlabel('Survived')
plt.ylabel('count')
plt.title('Survival Distribution w.r.t ports')
plt.show()

labels = ['S Survived', 'S Died']
sizes = [217,644-217]
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title('Port S')
plt.show()

labels = ['C Survived', 'C Died']
sizes = [93,168-93]
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title('Port C')
plt.show()

labels = ['Q Survived', 'Q Died']
sizes = [30,77-30]
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title('Port Q')
plt.show()

Minors_ = df[df['Age'] < 15].shape[0]
Minors_

minors_survived = df[(df['Age'] <15) & (df['Survived'] == 1)].shape[0]
minors_survived

labels = ['Minors survived','Minors Died']
sizes = [45,78-45]
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title('Minor Survival')
plt.show()

with_family = df[(df['SibSp'] > 0) | (df['Parch'] > 0)].shape[0]
with_family

with_family1 = df[(df['SibSp'] > 0) | (df['Parch'] > 0)]
died_f = with_family1[with_family1['Survived'] == 0].shape[0]
died_f

labels = ['Survived', 'Died']
sizes = [354-175,175]
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title('People With Atleast One Family Member')
plt.show()

pclass_counts = df['Pclass'].value_counts()
pclass_counts

survived_class_1 = df[(df['Pclass'] == 1) & (df['Survived'] == 1)].shape[0]
print("Number of people survived in class 1:", survived_class_1)

survived_class_2 = df[(df['Pclass'] == 2) & (df['Survived'] == 1)].shape[0]
print("Number of people survived in class 2:", survived_class_2)

survived_class_3 = df[(df['Pclass'] == 3) & (df['Survived'] == 1)].shape[0]
print("Number of people survived in class 3:", survived_class_3)

pd.crosstab(df.Pclass,df.Survived,margins=True).style.background_gradient(cmap='summer_r')

labels = ['Survived from Ist class', 'Died from Iast class']
sizes = [136,216-136]
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title('Ist class Survival')
plt.show()

labels = ['Survived from 2nd class', 'Died from 2nd class']
sizes = [87,184-87]
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title('2nd class Survival')
plt.show()

labels = ['Survived from 3rd class', 'Died from 3rd class']
sizes = [119,491-119]
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title('3rd class Survival')
plt.show()

adults_count = df[(df['Age'] > 18) & (df['Age'] < 60)].shape[0]
print("Number of adults on the ship:", adults_count)

adults_survived = df[(df['Age'] > 18) & (df['Age'] < 60) & (df['Survived'] == 1)].shape[0]
adults_survived

labels = ['Adults survived', 'No. of adults died']
sizes = [213,549-213]
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title('Survival distribution for Adults')
plt.show()

Old_count = df[df['Age'] > 60].shape[0]
print("Number of adults on the ship:", Old_count)

old_survived = df[(df['Age'] > 60) & (df['Survived'] == 1)].shape[0]
old_survived

labels = ['Old people survived', 'No. of old people died']
sizes = [5,22-5]
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title('Survival distribution for Old people')
plt.show()

avg_fare = df.groupby('Pclass')['Fare'].mean()
print(avg_fare)

categories = ['Class 1', 'Class 2','Class 3']
Fare = [84.15487,20.662183,13.675550]
plt.bar(categories, Fare)
plt.xlabel('Classes')
plt.ylabel('Fare')
plt.title('avg Fare per class')
plt.show()

! pip install ydata_profiling
import matplotlib.pyplot as plt
import pandas as pd
from ydata_profiling import ProfileReport
df = pd.read_csv('Titanic.csv')
profile = ProfileReport(df)
profile.to_file('EDA.html')

from google.colab import files
files.download('EDA.html')

total_passengers= 891
total_alive_passengers = df['Survived'].sum()
total_dead_passengers = total_passengers - total_alive_passengers

passengers_data = pd.DataFrame({'Alive Passengers': [total_alive_passengers],
                                'Dead Passengers': [total_dead_passengers]},
                                index=['Total Passengers'])

passengers_data.plot(kind='bar', stacked=True, figsize=(6, 6))
plt.title(' Alive vs. Dead Passengers on Titanic')
plt.xlabel('Category')
plt.ylabel('Count')
plt.legend(title='Passenger Status')
plt.show()