# -*- coding: utf-8 -*-
"""Titanic_predictive_modeling

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lvy8z6tFwTwV-UVMw1RBwFpyCwqI-lg8
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression, LinearRegression
from sklearn.metrics import classification_report
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

df = pd.read_csv('modified_file.csv')

features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch']
X = df[features]
y = df['Survived']

numerical_transformer = StandardScaler()
categorical_transformer = OneHotEncoder(handle_unknown='ignore')

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numerical_transformer, ['Age', 'SibSp', 'Parch']),
        ('cat', categorical_transformer, ['Pclass', 'Sex'])
    ])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

lr_pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                              ('classifier', LogisticRegression(random_state=42))])
lr_pipeline.fit(X_train, y_train)

linreg_pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                                  ('regressor', LinearRegression())])
linreg_pipeline.fit(X_train, y_train)

lr_predictions = lr_pipeline.predict(X_test)
linreg_predictions = linreg_pipeline.predict(X_test)

print("Logistic Regression Classification Report:")
print(classification_report(y_test, lr_predictions))

print("Linear Regression as Classifier Report:")
print(classification_report(y_test, np.where(linreg_predictions >= 0.5, 1, 0)))

linreg_coefficients = linreg_pipeline.named_steps['regressor'].coef_
print("Linear Regression Coefficients:")
print(linreg_coefficients)

num_features = preprocessor.transformers_[0][2]
cat_features = preprocessor.transformers_[1][1].get_feature_names_out(input_features=['Pclass', 'Sex'])

# Combine feature names with coefficients
# feature_names = list(num_features) + list(cat_features)
# equation = f"y = {intercept:.2f}"
# for feature, coef in zip(feature_names, linreg_coefficients):
#     equation += f" + {coef:.2f} * {feature}"

# print("Linear Regression Equation:")
# print(equation)